<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[semantic art]]></title>
  <link href="http://blog.semanticart.com/blog/atom.xml" rel="self"/>
  <link href="http://blog.semanticart.com/blog/"/>
  <updated>2015-05-17T19:07:56-04:00</updated>
  <id>http://blog.semanticart.com/blog/</id>
  <author>
    <name><![CDATA[Jeffrey Chupp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[I18n Game Content: Multi-lingual Audiosprites And Captions Workflow]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2015/05/17/multi-lingual-audiosprites-and-captions-workflow/"/>
    <updated>2015-05-17T18:29:00-04:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2015/05/17/multi-lingual-audiosprites-and-captions-workflow</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;ve started making a list in my head of things I feel strongly about in software. I18n is pretty high towards the top of that list. I wrote (and re-wrote) a post explaining why i18n is so darn important, but I couldn&rsquo;t find a comfortable balance between all-out rant and something that felt hollow. In the meantime, I&rsquo;m just going to say clearly: <strong>&ldquo;Please internationalize your software.&rdquo;</strong></em></p>

<p><em>Here&rsquo;s an example of I18n in the wild.</em></p>

<h2>I was working on a game&hellip;</h2>

<p>I&rsquo;ve wanted to make a video game since I was a kid sitting at my dad&rsquo;s Apple IIc thumbing through the Basic manual. I briefly toyed around with various attempts over the years but never really got very serious. Last year I finally devoted some real time into learning both Unity and Phaser. I ended up shelving game-dev for a bit, but it was fun exploring new challenges.</p>

<p>While I was prototyping an adventure game in <a href="http://phaser.io/" title="Phaser - A fast, fun and free open source HTML5 game framework">Phaser</a>, I wanted to build a robust audio and text dialogue system that supported multiple language locales. I ended up finding some neat technologies and creating a comfortably streamlined workflow.</p>

<p>You can <a href="http://blog.semanticart.com/blog/i18n-phaser-example/">check out the resulting audio engine prototype</a> read on for the process.</p>

<h2>The requirements</h2>

<ol>
<li>cross-browser compatible audio</li>
<li>captions in multiple languages</li>
<li>audio in multiple languages</li>
<li>easy to create and update</li>
<li>caption display timing synchronized with audio</li>
</ol>


<p>(Note that the actual mechanics of dialogue bouncing between person A and person B won&rsquo;t be covered here.)</p>

<h2>Cross-browser compatible audio</h2>

<p>Different browsers <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats#Browser_compatibility" title="Media formats supported by the HTML audio and video elements">support different audio formats</a> out of the box. If you want cross-browser compatible audio, you really want to serve your content in multiple formats. Don&rsquo;t fret about bandwidth: clever frameworks (Phaser included) will only download the best format for the current browser.</p>

<p>In Phaser, you just pass an array of audio files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">game</span><span class="p">.</span><span class="nx">load</span><span class="p">.</span><span class="nx">audio</span><span class="p">(</span><span class="s1">&#39;locked_door&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;assets/audio/locked_door.ac3&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;assets/audio/locked_door.ogg&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You want ogg for Firefox and then probably m4a and/or ac3. You might want to avoid mp3 for licensing reasons, but I&rsquo;m not a lawyer (I&rsquo;m also not an astronaut).</p>

<h2>Captions in multiple languages</h2>

<p>For our purposes, captions are really just text displayed on the screen. In nearly every adventure game, the character will encounter a locked door. Attempting to walk through that door should result in our character explaining why that can&rsquo;t happen yet.</p>

<p>Even if we didn&rsquo;t care about internationalization, it would make sense to refer to the caption content by a key rather than hard-coding the full text strings throughout our game. Beyond just keeping our code clean, externalizing the strings will allow us to have all our content in one place for easy editing.</p>

<p>Here&rsquo;s a very simple caption file in JSON format:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;found_key&quot;</span><span class="p">:</span> <span class="s2">&quot;Oh, look: a key.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;locked_door&quot;</span><span class="p">:</span> <span class="s2">&quot;Drats! The door is locked.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;entered_room&quot;</span><span class="p">:</span> <span class="s2">&quot;Finally, we&#39;re indoors.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll write a function to render the caption so that we only need to pass in the key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">translationKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// get the text from our captions json</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">textToRender</span> <span class="o">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">cache</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;speechCaptions&#39;</span><span class="p">)[</span><span class="nx">translationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// draw our caption</span>
</span><span class='line'>  <span class="nx">game</span><span class="p">.</span><span class="nx">add</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">textToRender</span><span class="p">,</span> <span class="nx">captionStyle</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">say</span><span class="p">(</span><span class="s2">&quot;locked_door&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it renders something like this:</p>

<p><img src="http://blog.semanticart.com/blog/images/locked_door.jpg" alt="locked door caption" /></p>

<p>Localizing our captions is pretty straightforward. For each language we want to support, we copy an existing translation file and replace the JSON values (not the keys) with translated versions.</p>

<p>We&rsquo;d do well to leverage convention over configuration. Keep all captions for a locale in a folder with the locale name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/assets/audio/en/captions.json</span>
</span><span class='line'><span class="o">/</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">de</span><span class="o">/</span><span class="nx">captions</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Changing locales should change the locale folder being used. Your game is always loading &ldquo;captions.json&rdquo; and it just decides which copy to load based on the player&rsquo;s locale.</p>

<h2>Audio in multiple languages</h2>

<p>This part doesn&rsquo;t need to be overly clever. Record the same content in various formats for each language.</p>

<p>Consider the caption JSON from the previous section. It might make sense to have one JSON file per character. With some direction, a voice actor could read each line and you could save the line with a filename matching the key (e.g. the audio &ldquo;Drats! The door is locked.&rdquo; is saved as locked_door.wav).</p>

<p>We&rsquo;ll store the encoded versions in locale-specific folders as we did with our captions.json</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/assets/audio/en/locked_door.ac3</span>
</span><span class='line'><span class="o">/</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">locked_door</span><span class="p">.</span><span class="nx">ogg</span>
</span><span class='line'><span class="o">/</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">de</span><span class="o">/</span><span class="nx">locked_door</span><span class="p">.</span><span class="nx">ac3</span>
</span><span class='line'><span class="o">/</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">de</span><span class="o">/</span><span class="nx">locked_door</span><span class="p">.</span><span class="nx">ogg</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then we can update our <code>say</code> function to also play the corresponding bit of audio.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">translationKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// get the text from our captions json</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">textToRender</span> <span class="o">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">cache</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;speechCaptions&#39;</span><span class="p">)[</span><span class="nx">translationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// draw our caption</span>
</span><span class='line'>  <span class="nx">game</span><span class="p">.</span><span class="nx">add</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">textToRender</span><span class="p">,</span> <span class="nx">captionStyle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// speak our line</span>
</span><span class='line'>  <span class="nx">game</span><span class="p">.</span><span class="nx">speech</span><span class="p">.</span><span class="nx">play</span><span class="p">(</span><span class="nx">translationKey</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">say</span><span class="p">(</span><span class="s2">&quot;locked_door&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Easy to create and update</h2>

<p>Have you ever played a game or watched a movie where the captions didn&rsquo;t accurately reflect what was being said? This drives me crazy.</p>

<p>I&rsquo;m guessing that the reason that audio and caption text fall out of sync is probably late content changes or the result of actors ad-libbing. Fortunately we&rsquo;ve got a system that is friendly to rewrites from either side. Prefer the ad-lib? Update the caption file. Change the caption? Re-record the corresponding line.</p>

<p>The content workflow here is straightforward. To reiterate:</p>

<ul>
<li>Create a script as json with keys and text. Edit this until you&rsquo;re happy. Tweak it as the game content progresses.</li>
<li>Translate that file into as many locales as you care about.</li>
<li>Losslessly record each line for each locale and save the line under the file name of the key.</li>
<li>Tweak captions and re-record as necessary.</li>
</ul>


<p>That&rsquo;s all well and good, but now you&rsquo;ve got a ton of raw audio files you&rsquo;ll need to encode over and over again. And having a user download hundreds of small audio files is hardly efficient.</p>

<p>We can do better. Enter the Audio Sprite. You may already be familiar with its visual counterpart <a href="http://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29" title="Wikipedia: Sprite (computer graphics)">the sprite sheet</a>, which combines multiple images into a single image. An audio sprite combines multiple bits of audio into one file and has additional data to mark when each clip starts and ends.</p>

<p>Using the <a href="https://github.com/tonistiigi/audiosprite" title="Github: audiosprite - Jukebox/Howler/CreateJS compatible audio sprite generator">audiosprite</a> library, we can store all of our raw audio assets in a per-locale folder and run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">➜</span>  <span class="nx">audiosprite</span> <span class="nx">raw</span><span class="o">-</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/*</span><span class="p">.</span><span class="nx">wav</span> <span class="o">-</span><span class="nx">o</span> <span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">File</span> <span class="nx">added</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="err">/var/folders/yw/9wvsjry92ggb9959g805_yfsvj7lg6/T/audiosprite.16278579225763679, duration=1.6600907029478458</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Silence</span> <span class="nx">gap</span> <span class="nx">added</span> <span class="nx">duration</span><span class="o">=</span><span class="mf">1.3399092970521542</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">File</span> <span class="nx">added</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="err">/var/folders/yw/9wvsjry92ggb9959g805_yfsvj7lg6/T/audiosprite.6657312458846718, duration=1.8187981859410431</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Silence</span> <span class="nx">gap</span> <span class="nx">added</span> <span class="nx">duration</span><span class="o">=</span><span class="mf">1.1812018140589569</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">File</span> <span class="nx">added</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="err">/var/folders/yw/9wvsjry92ggb9959g805_yfsvj7lg6/T/audiosprite.3512551293242723, duration=2.171519274376417</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Silence</span> <span class="nx">gap</span> <span class="nx">added</span> <span class="nx">duration</span><span class="o">=</span><span class="mf">1.8284807256235829</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Exported</span> <span class="nx">ogg</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span><span class="p">.</span><span class="nx">ogg</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Exported</span> <span class="nx">m4a</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span><span class="p">.</span><span class="nx">m4a</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Exported</span> <span class="nx">mp3</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span><span class="p">.</span><span class="nx">mp3</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Exported</span> <span class="nx">ac3</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span><span class="p">.</span><span class="nx">ac3</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Exported</span> <span class="nx">json</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">All</span> <span class="nx">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome. This generated a single file that joins together all of our content and did so in multiple formats. If we peek in the generated JSON file we see</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;resources&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;assets/audio/en/speech.ogg&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;assets/audio/en/speech.m4a&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;assets/audio/en/speech.mp3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;assets/audio/en/speech.ac3&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;spritemap&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;entered_room&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;end&quot;</span><span class="p">:</span> <span class="mf">1.6600907029478458</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;loop&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;found_key&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;end&quot;</span><span class="p">:</span> <span class="mf">4.818798185941043</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;loop&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;locked_door&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;end&quot;</span><span class="p">:</span> <span class="mf">8.171519274376417</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;loop&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Phaser <a href="http://phaser.io/docs/2.2.3/Phaser.AudioSprite.html">supports audiosprites</a> quite well. We tweak our engine a bit to use sprites instead of individual files and we&rsquo;re good to go.</p>

<h2>Caption display timing synchronized with audio</h2>

<p>Now we turn to keeping the captions we&rsquo;re displaying in sync with the audio being played. We have all the timing data we need in our audiosprite JSON.</p>

<p>We&rsquo;ll update our <code>say</code> function to clean up the dialog text after the audio has ended:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">translationKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// get the text from our captions json</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">textToRender</span> <span class="o">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">cache</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;speechCaptions&#39;</span><span class="p">)[</span><span class="nx">translationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// draw our caption</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">caption</span> <span class="o">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">add</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">textToRender</span><span class="p">,</span> <span class="nx">captionStyle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// speak our line</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">audio</span> <span class="o">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">speech</span><span class="p">.</span><span class="nx">play</span><span class="p">(</span><span class="nx">translationKey</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// set a timeout to remove the caption when the audio finishes</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">caption</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span> <span class="nx">audio</span><span class="p">.</span><span class="nx">durationMS</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">say</span><span class="p">(</span><span class="s2">&quot;locked_door&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aside: Not everyone reads at the same speed. You&rsquo;ll probably want to consider having some sort of slider that acts as a multiplier for the caption duration. Readers who prefer to read more slowly can happily use 1.5X or 2X caption duration. You might not want to have the slider go less than 1X lest the captions disappear while the speech audio is still ongoing, but perhaps some portion of your audience will turn off audio in favor of reading quickly. The duration of the audio still makes sense to me as a starting point for caption duration.</p>

<h2>The prototype code</h2>

<p>The <a href="https://github.com/semanticart/i18n-phaser-audiosprite-example">prototype code</a> covers all you need to get rolling with Phaser and Audiosprites. It also has basic support for preventing people talking over each other. Hopefully you&rsquo;ll find it instructive or at least interesting.</p>

<p>Perhaps one day I&rsquo;ll have a proper game prototype to share.</p>

<p>That concludes this random example of I18n in the wild. Stay global, folks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I18n Game Content: Multi-lingual Audiosprites And Captions Workflow]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2015/05/17/i18n-game-content-multi-lingual-audiosprites-and-captions-workflow/"/>
    <updated>2015-05-17T18:29:00-04:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2015/05/17/i18n-game-content-multi-lingual-audiosprites-and-captions-workflow</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;ve started making a list in my head of things I feel strongly about in software. I18n is pretty high towards the top of that list. I wrote (and re-wrote) a post explaining why i18n is so darn important, but I couldn&rsquo;t find a comfortable balance between all-out rant and something that felt hollow. In the meantime, I&rsquo;m just going to say clearly: <strong>&ldquo;Please internationalize your software.&rdquo;</strong></em></p>

<p><em>Here&rsquo;s an example of I18n in the wild.</em></p>

<h2>I was working on a game&hellip;</h2>

<p>I&rsquo;ve wanted to make a video game since I was a kid sitting at my dad&rsquo;s Apple IIc thumbing through the Basic manual. I briefly toyed around with various attempts over the years but never really got very serious. Last year I finally devoted some real time into learning both Unity and Phaser. I ended up shelving game-dev for a bit, but it was fun exploring new challenges.</p>

<p>While I was prototyping an adventure game in <a href="http://phaser.io/" title="Phaser - A fast, fun and free open source HTML5 game framework">Phaser</a>, I wanted to build a robust audio and text dialogue system that supported multiple language locales. I ended up finding some neat technologies and creating a comfortably streamlined workflow.</p>

<p>You can <a href="http://blog.semanticart.com/blog/i18n-phaser-example/">check out the resulting audio engine prototype</a> read on for the process.</p>

<h2>The requirements</h2>

<ol>
<li>cross-browser compatible audio</li>
<li>captions in multiple languages</li>
<li>audio in multiple languages</li>
<li>easy to create and update</li>
<li>caption display timing synchronized with audio</li>
</ol>


<p>(Note that the actual mechanics of dialogue bouncing between person A and person B won&rsquo;t be covered here.)</p>

<h2>Cross-browser compatible audio</h2>

<p>Different browsers <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats#Browser_compatibility" title="Media formats supported by the HTML audio and video elements">support different audio formats</a> out of the box. If you want cross-browser compatible audio, you really want to serve your content in multiple formats. Don&rsquo;t fret about bandwidth: clever frameworks (Phaser included) will only download the best format for the current browser.</p>

<p>In Phaser, you just pass an array of audio files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">game</span><span class="p">.</span><span class="nx">load</span><span class="p">.</span><span class="nx">audio</span><span class="p">(</span><span class="s1">&#39;locked_door&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;assets/audio/locked_door.ac3&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;assets/audio/locked_door.ogg&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You want ogg for Firefox and then probably m4a and/or ac3. You might want to avoid mp3 for licensing reasons, but I&rsquo;m not a lawyer (I&rsquo;m also not an astronaut).</p>

<h2>Captions in multiple languages</h2>

<p>For our purposes, captions are really just text displayed on the screen. In nearly every adventure game, the character will encounter a locked door. Attempting to walk through that door should result in our character explaining why that can&rsquo;t happen yet.</p>

<p>Even if we didn&rsquo;t care about internationalization, it would make sense to refer to the caption content by a key rather than hard-coding the full text strings throughout our game. Beyond just keeping our code clean, externalizing the strings will allow us to have all our content in one place for easy editing.</p>

<p>Here&rsquo;s a very simple caption file in JSON format:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;found_key&quot;</span><span class="p">:</span> <span class="s2">&quot;Oh, look: a key.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;locked_door&quot;</span><span class="p">:</span> <span class="s2">&quot;Drats! The door is locked.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;entered_room&quot;</span><span class="p">:</span> <span class="s2">&quot;Finally, we&#39;re indoors.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll write a function to render the caption so that we only need to pass in the key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">translationKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// get the text from our captions json</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">textToRender</span> <span class="o">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">cache</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;speechCaptions&#39;</span><span class="p">)[</span><span class="nx">translationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// draw our caption</span>
</span><span class='line'>  <span class="nx">game</span><span class="p">.</span><span class="nx">add</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">textToRender</span><span class="p">,</span> <span class="nx">captionStyle</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">say</span><span class="p">(</span><span class="s2">&quot;locked_door&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it renders something like this:</p>

<p><img src="http://blog.semanticart.com/blog/images/locked_door.jpg" alt="locked door caption" /></p>

<p>Localizing our captions is pretty straightforward. For each language we want to support, we copy an existing translation file and replace the JSON values (not the keys) with translated versions.</p>

<p>We&rsquo;d do well to leverage convention over configuration. Keep all captions for a locale in a folder with the locale name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/assets/audio/en/captions.json</span>
</span><span class='line'><span class="o">/</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">de</span><span class="o">/</span><span class="nx">captions</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Changing locales should change the locale folder being used. Your game is always loading &ldquo;captions.json&rdquo; and it just decides which copy to load based on the player&rsquo;s locale.</p>

<h2>Audio in multiple languages</h2>

<p>This part doesn&rsquo;t need to be overly clever. Record the same content in various formats for each language.</p>

<p>Consider the caption JSON from the previous section. It might make sense to have one JSON file per character. With some direction, a voice actor could read each line and you could save the line with a filename matching the key (e.g. the audio &ldquo;Drats! The door is locked.&rdquo; is saved as locked_door.wav).</p>

<p>We&rsquo;ll store the encoded versions in locale-specific folders as we did with our captions.json</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/assets/audio/en/locked_door.ac3</span>
</span><span class='line'><span class="o">/</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">locked_door</span><span class="p">.</span><span class="nx">ogg</span>
</span><span class='line'><span class="o">/</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">de</span><span class="o">/</span><span class="nx">locked_door</span><span class="p">.</span><span class="nx">ac3</span>
</span><span class='line'><span class="o">/</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">de</span><span class="o">/</span><span class="nx">locked_door</span><span class="p">.</span><span class="nx">ogg</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then we can update our <code>say</code> function to also play the corresponding bit of audio.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">translationKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// get the text from our captions json</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">textToRender</span> <span class="o">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">cache</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;speechCaptions&#39;</span><span class="p">)[</span><span class="nx">translationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// draw our caption</span>
</span><span class='line'>  <span class="nx">game</span><span class="p">.</span><span class="nx">add</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">textToRender</span><span class="p">,</span> <span class="nx">captionStyle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// speak our line</span>
</span><span class='line'>  <span class="nx">game</span><span class="p">.</span><span class="nx">speech</span><span class="p">.</span><span class="nx">play</span><span class="p">(</span><span class="nx">translationKey</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">say</span><span class="p">(</span><span class="s2">&quot;locked_door&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Easy to create and update</h2>

<p>Have you ever played a game or watched a movie where the captions didn&rsquo;t accurately reflect what was being said? This drives me crazy.</p>

<p>I&rsquo;m guessing that the reason that audio and caption text fall out of sync is probably late content changes or the result of actors ad-libbing. Fortunately we&rsquo;ve got a system that is friendly to rewrites from either side. Prefer the ad-lib? Update the caption file. Change the caption? Re-record the corresponding line.</p>

<p>The content workflow here is straightforward. To reiterate:</p>

<ul>
<li>Create a script as json with keys and text. Edit this until you&rsquo;re happy. Tweak it as the game content progresses.</li>
<li>Translate that file into as many locales as you care about.</li>
<li>Losslessly record each line for each locale and save the line under the file name of the key.</li>
<li>Tweak captions and re-record as necessary.</li>
</ul>


<p>That&rsquo;s all well and good, but now you&rsquo;ve got a ton of raw audio files you&rsquo;ll need to encode over and over again. And having a user download hundreds of small audio files is hardly efficient.</p>

<p>We can do better. Enter the Audio Sprite. You may already be familiar with its visual counterpart <a href="http://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29" title="Wikipedia: Sprite (computer graphics)">the sprite sheet</a>, which combines multiple images into a single image. An audio sprite combines multiple bits of audio into one file and has additional data to mark when each clip starts and ends.</p>

<p>Using the <a href="https://github.com/tonistiigi/audiosprite" title="Github: audiosprite - Jukebox/Howler/CreateJS compatible audio sprite generator">audiosprite</a> library, we can store all of our raw audio assets in a per-locale folder and run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">➜</span>  <span class="nx">audiosprite</span> <span class="nx">raw</span><span class="o">-</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/*</span><span class="p">.</span><span class="nx">wav</span> <span class="o">-</span><span class="nx">o</span> <span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">File</span> <span class="nx">added</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="err">/var/folders/yw/9wvsjry92ggb9959g805_yfsvj7lg6/T/audiosprite.16278579225763679, duration=1.6600907029478458</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Silence</span> <span class="nx">gap</span> <span class="nx">added</span> <span class="nx">duration</span><span class="o">=</span><span class="mf">1.3399092970521542</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">File</span> <span class="nx">added</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="err">/var/folders/yw/9wvsjry92ggb9959g805_yfsvj7lg6/T/audiosprite.6657312458846718, duration=1.8187981859410431</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Silence</span> <span class="nx">gap</span> <span class="nx">added</span> <span class="nx">duration</span><span class="o">=</span><span class="mf">1.1812018140589569</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">File</span> <span class="nx">added</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="err">/var/folders/yw/9wvsjry92ggb9959g805_yfsvj7lg6/T/audiosprite.3512551293242723, duration=2.171519274376417</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Silence</span> <span class="nx">gap</span> <span class="nx">added</span> <span class="nx">duration</span><span class="o">=</span><span class="mf">1.8284807256235829</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Exported</span> <span class="nx">ogg</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span><span class="p">.</span><span class="nx">ogg</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Exported</span> <span class="nx">m4a</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span><span class="p">.</span><span class="nx">m4a</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Exported</span> <span class="nx">mp3</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span><span class="p">.</span><span class="nx">mp3</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Exported</span> <span class="nx">ac3</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span><span class="p">.</span><span class="nx">ac3</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">Exported</span> <span class="nx">json</span> <span class="nx">OK</span> <span class="nx">file</span><span class="o">=</span><span class="nx">assets</span><span class="o">/</span><span class="nx">audio</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">speech</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="nx">info</span><span class="o">:</span> <span class="nx">All</span> <span class="nx">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome. This generated a single file that joins together all of our content and did so in multiple formats. If we peek in the generated JSON file we see</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;resources&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;assets/audio/en/speech.ogg&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;assets/audio/en/speech.m4a&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;assets/audio/en/speech.mp3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;assets/audio/en/speech.ac3&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;spritemap&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;entered_room&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;end&quot;</span><span class="p">:</span> <span class="mf">1.6600907029478458</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;loop&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;found_key&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;end&quot;</span><span class="p">:</span> <span class="mf">4.818798185941043</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;loop&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;locked_door&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;end&quot;</span><span class="p">:</span> <span class="mf">8.171519274376417</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;loop&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Phaser <a href="http://phaser.io/docs/2.2.3/Phaser.AudioSprite.html">supports audiosprites</a> quite well. We tweak our engine a bit to use sprites instead of individual files and we&rsquo;re good to go.</p>

<h2>Caption display timing synchronized with audio</h2>

<p>Now we turn to keeping the captions we&rsquo;re displaying in sync with the audio being played. We have all the timing data we need in our audiosprite JSON.</p>

<p>We&rsquo;ll update our <code>say</code> function to clean up the dialog text after the audio has ended:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">translationKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// get the text from our captions json</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">textToRender</span> <span class="o">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">cache</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;speechCaptions&#39;</span><span class="p">)[</span><span class="nx">translationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// draw our caption</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">caption</span> <span class="o">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">add</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">textToRender</span><span class="p">,</span> <span class="nx">captionStyle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// speak our line</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">audio</span> <span class="o">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">speech</span><span class="p">.</span><span class="nx">play</span><span class="p">(</span><span class="nx">translationKey</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// set a timeout to remove the caption when the audio finishes</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">caption</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span> <span class="nx">audio</span><span class="p">.</span><span class="nx">durationMS</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">say</span><span class="p">(</span><span class="s2">&quot;locked_door&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aside: Not everyone reads at the same speed. You&rsquo;ll probably want to consider having some sort of slider that acts as a multiplier for the caption duration. Readers who prefer to read more slowly can happily use 1.5X or 2X caption duration. You might not want to have the slider go less than 1X lest the captions disappear while the speech audio is still ongoing, but perhaps some portion of your audience will turn off audio in favor of reading quickly. The duration of the audio still makes sense to me as a starting point for caption duration.</p>

<h2>The prototype code</h2>

<p>The <a href="https://github.com/semanticart/i18n-phaser-audiosprite-example">prototype code</a> covers all you need to get rolling with Phaser and Audiosprites. It also has basic support for preventing people talking over each other. Hopefully you&rsquo;ll find it instructive or at least interesting.</p>

<p>That concludes this random example of I18n in the wild. Stay global, folks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 Year-In-Review]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2014/12/31/2014-year-in-review/"/>
    <updated>2014-12-31T18:50:00-05:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2014/12/31/2014-year-in-review</id>
    <content type="html"><![CDATA[<p>2014 was a great but complicated year. Here&rsquo;s a completely unnecessary and self-indulgent look back at some of it.</p>

<!--more-->


<h2>Coding</h2>

<p>This year I moved away from doing full-time Rails to working on single-page Backbone apps with Java APIs. I still reach for Ruby as my scripting language, but I&rsquo;m solving different problems these days. I still feel sluggish in Java and am working to pick up some best-practices. I&rsquo;ve also been enjoying playing with <a href="http://elixir-lang.org/">Elixir</a>.</p>

<p>I didn&rsquo;t contribute much to open source this year. This is probably related to a lack of free time from changing jobs and my daughter being born. <a href="http://www.hubspot.com/">My current company</a> has many internal tools so a lot of my remaining tinkering energies were spent improving those.</p>

<p>Next year I&rsquo;d like to work more on open source and dig deeper into functional programming.</p>

<h2>Music</h2>

<p>Thanks to <a href="http://www.last.fm/user/violencenow">last.fm</a>, I can see that roughly half my top 15 artists in 2014 were artists I discovered this year.</p>

<p><img class="right" src="http://blog.semanticart.com/blog/images/top-artists-2014.png" title="'2014 Top Artists'" ></p>

<p>The chart for the last 3 months is also interesting.</p>

<p><img class="right" src="http://blog.semanticart.com/blog/images/top-artists-2014-last-three.png" title="'2014 Top Artists of Last Three Months'" ></p>

<p>Themes for the year include punk, newer emo bands, and Norwegian dream pop&hellip; I didn&rsquo;t see that last one coming, but <a href="http://www.last.fm/music/Bendik">Bendik</a> and <a href="http://www.last.fm/music/Frode+Johannessen">Frode Johannessen</a> hit me perfectly in the past few months. Amazingly, Frode is essentially ungoogleable and only has 463 last.fm listeners at the time I write this. <a href="https://www.youtube.com/watch?v=Nb_-QK9wPas">Det gjør någe me meg</a> is worth a listen.</p>

<p>I believe those last two artists were recommendations from <a href="http://www.last.fm/music/Youth+Pictures+of+Florence+Henderson">Youth Pictures of Florence Henderson</a> who I continue to love like no other.</p>

<p>Album of the year for me is a toss-up between Prawn&rsquo;s <a href="http://topshelfrecords.bandcamp.com/album/kingfisher">Kingfisher</a> and The Hotelier&rsquo;s <a href="http://thehotelyear.bandcamp.com/album/home-like-noplace-is-there">Home, Like Noplace Is There</a>. Both are stellar and you should frankly drop whatever you&rsquo;re doing and listen to both of them right now. I&rsquo;ll wait.</p>

<h2>Reading</h2>

<p>For the second year in a row, I set and completed a goal of reading fifty books for the <a href="https://www.goodreads.com/challenges/1914-2014-reading-challenge">Goodreads Reading Challenge</a>. Despite reading 68 books last year, I just barely finished 50 this year. The average page count per book was 430. <a href="https://www.goodreads.com/user_challenges/1225227">Looking at the books I read</a>, you see mostly Sci-fi and Fantasy with a few nonfiction books thrown in.</p>

<p>Brandon Sanderson continues to rock my world with his <a href="https://www.goodreads.com/book/show/7235533-the-way-of-kings">The Way of Kings</a> and the sequel accounting for 2k+ pages of goodness. Scott Lynch&rsquo;s <a href="https://www.goodreads.com/book/show/127455.The_Lies_of_Locke_Lamora">Gentleman Bastard</a> books were fun heist stories with lovable rogues. The strangest but most loved book was Catherynne M. Valente&rsquo;s <a href="https://www.goodreads.com/book/show/12887497-silently-and-very-fast">Silently and Very Fast</a> which tells the story of the life of a budding AI through dreamy fairytale symbolism. It certainly isn&rsquo;t for everyone, but I found it to be an important read.</p>

<p>Next year, I actually plan to read less with an eye towards diversifying my hobbies. I&rsquo;ll probably set a goal of 30 books. Additionally, I&rsquo;d like that to include more technical writing.</p>

<h2>Hobbies</h2>

<p>This year reading was essentially my only hobby besides playing with my son Trey (10). In addition to playing in the park and such, we spent entirely too much time playing video games together. Favorites from this year include <a href="http://www.awesomenauts.com/">Awesomenauts</a> and adventure games like <a href="http://en.wikipedia.org/wiki/Day_of_the_Tentacle">Day of the Tentacle</a>, <a href="http://www.gog.com/game/deponia">Deponia</a>, and <a href="http://www.gog.com/game/the_ballads_of_reemus_when_the_bed_bites">Ballads of Reemus</a>. Trey also played his first FPS, <a href="http://www.gog.com/game/tower_of_guns">Tower of Guns</a>, and did wonderfully.</p>

<p>Next year I&rsquo;d like to do more toying around with small-electronics (Arduino, etc.) and get Trey involved. I&rsquo;d also like to engage in more physically active hobbies with my son (perhaps rock-climbing?). I&rsquo;ll keep playing adeventure/puzzle games with him, though, since they&rsquo;re good bonding time. I should also blog more.</p>

<h2>Family</h2>

<p>I had a daughter this year in May. She&rsquo;s amazing. Trey has been a great big-brother and Julia continues to be an excellent mother. I&rsquo;m a lucky man.</p>

<p>Nothing is more important than family. Next year I&rsquo;ll be asking myself how I can spend more quality time with them.</p>

<h2>Current status: Still not rich.</h2>

<p>For this year&rsquo;s wild attempt at financial freedom I spent a lot of time trying to learn game development. <a href="http://unity3d.com/">Unity</a> is interesting but scaling 2d assets are still a giant pain and I realized I don&rsquo;t have the talent or free-time to be a one-man game studio. Go figure, right? Maybe if I quit my job and doubled-down on it&hellip; but that&rsquo;s just not realistic or what I want right now.</p>

<p>For next year&rsquo;s wild attempt, I&rsquo;d really like to get some sort of SASS going as a side-project. If I&rsquo;ve learned anything working at HubSpot, it is how the economics of SASS are compelling and how having customers giving you money every month is both freeing and empowering. Even if this attempt fails dramatically, there&rsquo;s plenty to learn here.</p>

<h2>Onward</h2>

<p>I have a great job, great friends, and a great family. Alright, 2015, let&rsquo;s do this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Untwisting a Hypertext Narrative - PEG to the Rescue!]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2014/01/19/untwisting-a-hypertext-narrative-peg-to-the-rescue/"/>
    <updated>2014-01-19T13:18:00-05:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2014/01/19/untwisting-a-hypertext-narrative-peg-to-the-rescue</id>
    <content type="html"><![CDATA[<p>In this post you&rsquo;ll learn why I think Parsing Expression Grammars are awesome and see an example of how I built one to scratch an itch.</p>

<h2>The Itch</h2>

<p>After spending some time <a href="http://blog.semanticart.com/blog/2014/01/11/writing-hypertext-fiction-in-markdown/">writing Choose Your Own Adventure-style books in markdown</a>, I quickly realized there were some tools missing that could greatly improve the writing process. A few missing items were:</p>

<ol>
<li>Knowing if there are any unreachable sections that have been orphaned in the writing process.</li>
<li>Being able to see all the branches within a book.</li>
<li>Knowing each branch is coherent by having an easy way to read through them.</li>
</ol>


<p>&ldquo;Never fear,&rdquo; I say to myself, &ldquo;I can just write some code to parse the markdown files and pluck out the paths. This will be easy.&rdquo;</p>

<p>As a quick reminder, the format for a single section looks something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Something isn't right here. {#intro}
</span><span class='line'>
</span><span class='line'>You hear a phone ringing.
</span><span class='line'>
</span><span class='line'>- [pick up phone](#phone)
</span><span class='line'>- [do not answer](#ignore-phone)
</span><span class='line'>- [set yourself on fire](#fire)</span></code></pre></td></tr></table></div></figure>


<p>(Headers specify new sections starting and have some anchor. Links direct you to new sections.)</p>

<p>There are plenty of ways to slurp in a story file and parse it. You could write a naive line-by-line loop that breaks it into sections based on the presence of a header and then parse the links within sections with substring matching. You could write some complicated regular expression because <a href="http://stackoverflow.com/a/1732454">we all know how much fun regular expressions can become</a>. Or you could do something saner like write a <a href="https://en.wikipedia.org/wiki/Parsing_expression_grammar">parsing expression grammar</a> (hereafter PEG).</p>

<h2>Why a PEG?</h2>

<p>Generally, a regex makes for a beautiful collection of cryptic ascii art that you&rsquo;ll either comment-to-death or be confused by when you stumble across it weeks or months later. PEGs take a different approach and instead seek define <a href="https://en.wikipedia.org/wiki/Parsing_expression_grammar">&ldquo;a formal language in terms of a set of rules for recognizing strings in the language.&rdquo;</a> Because they&rsquo;re a set of rules, you can slowly TDD your way up from parsing a single phrase to parsing an entire document (or at least the parts you care about).</p>

<p>(It is worth mentioning that because the format here is pretty trivial, either the naive line-by-line solution or a regex is fine. PEGs are without a doubt the right choice IMHO for complicated grammars.)</p>

<h2>Show me some code</h2>

<p>We&rsquo;ll be using <a href="http://kschiess.github.io/parslet/">Parslet</a> to write our PEG. Parslet provides a succinct syntax and exponentially better error messages than other competing ruby PEGs (<code>parse_with_debug</code> is my friend). My biggest complaint about Parslet is that the documentation was occasionally lacking, but it only slowed things down a bit &ndash; and there&rsquo;s an <a href="http://kschiess.github.io/parslet/contribute.html">IRC channel and mailing list</a>.</p>

<p>Let&rsquo;s start off simple, just parsing the links out of a single section of markdown. Being a TDD&#8217;er, we&rsquo;ll write a few simple tests first (in MiniTest::Spec):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">LinkParser</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="no">LinkParser</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;can match a single link&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parsed</span> <span class="o">=</span> <span class="n">parse</span><span class="p">(</span><span class="s2">&quot;[some link name](#some-href)&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;some-href&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">parsed</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;can match a single link surrounded by content&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parsed</span> <span class="o">=</span> <span class="n">parse</span><span class="p">(</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">      hey there [some link name](#some-href)</span>
</span><span class='line'><span class="s2">      some content</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;some-href&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">parsed</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;can match a multiple links surrounded by content&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parsed</span> <span class="o">=</span> <span class="n">parse</span><span class="p">(</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">      hey there [some link name](#some-href)</span>
</span><span class='line'><span class="s2">      some content with a link [another](#new-href) and [another still](#last) ok?</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="s2">&quot;some-href&quot;</span><span class="p">,</span> <span class="s2">&quot;new-href&quot;</span><span class="p">,</span> <span class="s2">&quot;last&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="n">parsed</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">[</span><span class="ss">:id</span><span class="o">].</span><span class="n">to_s</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the working implementation of LinkParser:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LinkParser</span> <span class="o">&lt;</span> <span class="ss">Parslet</span><span class="p">:</span><span class="ss">:Parser</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:link_text</span><span class="p">)</span> <span class="p">{</span> <span class="n">str</span><span class="p">(</span><span class="s2">&quot;[&quot;</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">str</span><span class="p">(</span><span class="s1">&#39;]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">absent?</span> <span class="o">&gt;&gt;</span> <span class="n">any</span><span class="p">)</span><span class="o">.</span><span class="n">repeat</span> <span class="o">&gt;&gt;</span> <span class="n">str</span><span class="p">(</span><span class="s1">&#39;]&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:link_href</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">str</span><span class="p">(</span><span class="s1">&#39;(#&#39;</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">str</span><span class="p">(</span><span class="s1">&#39;)&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">absent?</span> <span class="o">&gt;&gt;</span> <span class="n">any</span><span class="p">)</span><span class="o">.</span><span class="n">repeat</span><span class="o">.</span><span class="n">as</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">str</span><span class="p">(</span><span class="s1">&#39;)&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:link</span><span class="p">)</span>      <span class="p">{</span> <span class="n">link_text</span> <span class="o">&gt;&gt;</span> <span class="n">link_href</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:non_link</span><span class="p">)</span>  <span class="p">{</span> <span class="p">(</span><span class="n">link</span><span class="o">.</span><span class="n">absent?</span> <span class="o">&gt;&gt;</span> <span class="n">any</span><span class="p">)</span><span class="o">.</span><span class="n">repeat</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:content</span><span class="p">)</span>   <span class="p">{</span> <span class="p">(</span><span class="n">non_link</span> <span class="o">&gt;&gt;</span> <span class="n">link</span> <span class="o">&gt;&gt;</span> <span class="n">non_link</span><span class="p">)</span><span class="o">.</span><span class="n">repeat</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">root</span><span class="p">(</span><span class="ss">:content</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Foul,&rdquo; you cry, &ldquo;this is much more complicated than a regular expression!&rdquo; And I reply &ldquo;Yes, but it is also more intelligible long-term as you build upon it.&rdquo; You don&rsquo;t look completely satisfied, but you&rsquo;ll continue reading.</p>

<p>It is worth noting that everything has a name:</p>

<ul>
<li>link_text encompasses everything between the two brackets in the markdown link.</li>
<li>link_href is the content within the parens. Because we are specifically linking only to anchors, we also include the # and then we&rsquo;ll name the id we&rsquo;re linking to via <code>as</code>.</li>
<li>link is just link_text + link_href</li>
<li>non_link is anything that isn&rsquo;t a link. It could be other markdown or plain text. It may or may not actually contain any characters at all.</li>
<li>content is the whole markdown content. We can see it is made up of some number of the following: non_link + link + non_link</li>
</ul>


<p>We&rsquo;ve specified that &ldquo;content&rdquo; is our root so the parser starts there.</p>

<h2>The Scratch: Adding the 3 missing features</h2>

<p>Now we have an easy way to extract links from sections within a story. We&rsquo;ll be able to leverage this to map the branches and solve all three problems.</p>

<p>But in order to break the larger story into sections we&rsquo;ll need to write a StoryParser which can parse an entire story file (for an example file, see <a href="http://blog.semanticart.com/blog/2014/01/11/writing-hypertext-fiction-in-markdown/">the previous post</a>). Again, this <a href="https://github.com/semanticart/cyoa-parser/blob/master/spec/story_parser_spec.rb">was TDD&#8217;ed</a>, but we&rsquo;ll cut to the chase:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">StoryParser</span> <span class="o">&lt;</span> <span class="ss">Parslet</span><span class="p">:</span><span class="ss">:Parser</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:space</span><span class="p">)</span> <span class="p">{</span> <span class="n">match</span><span class="p">(</span><span class="s1">&#39;\s&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">repeat</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:newline</span><span class="p">)</span> <span class="p">{</span> <span class="n">match</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:heading</span><span class="p">)</span> <span class="p">{</span> <span class="n">match</span><span class="p">(</span><span class="s1">&#39;^#&#39;</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">space</span><span class="o">.</span><span class="n">maybe</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">match</span><span class="o">[</span><span class="s1">&#39;\n{&#39;</span><span class="o">].</span><span class="n">absent?</span> <span class="o">&gt;&gt;</span> <span class="n">any</span><span class="p">)</span><span class="o">.</span><span class="n">repeat</span><span class="o">.</span><span class="n">as</span><span class="p">(</span><span class="ss">:heading</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="nb">id</span><span class="o">.</span><span class="n">maybe</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>      <span class="p">{</span> <span class="n">str</span><span class="p">(</span><span class="s1">&#39;{#&#39;</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">str</span><span class="p">(</span><span class="s1">&#39;}&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">absent?</span> <span class="o">&gt;&gt;</span> <span class="n">any</span><span class="p">)</span><span class="o">.</span><span class="n">repeat</span><span class="o">.</span><span class="n">as</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">str</span><span class="p">(</span><span class="s1">&#39;}&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:content</span><span class="p">)</span> <span class="p">{</span> <span class="p">((</span><span class="nb">id</span> <span class="o">|</span> <span class="n">heading</span><span class="p">)</span><span class="o">.</span><span class="n">absent?</span> <span class="o">&gt;&gt;</span> <span class="n">any</span><span class="p">)</span><span class="o">.</span><span class="n">repeat</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:section</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">heading</span> <span class="o">&gt;&gt;</span> <span class="n">space</span><span class="o">.</span><span class="n">maybe</span> <span class="o">&gt;&gt;</span> <span class="n">content</span><span class="o">.</span><span class="n">as</span><span class="p">(</span><span class="ss">:content</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">space</span><span class="o">.</span><span class="n">maybe</span><span class="p">)</span><span class="o">.</span><span class="n">as</span><span class="p">(</span><span class="ss">:section</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:tile_block</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">str</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">newline</span><span class="o">.</span><span class="n">absent?</span> <span class="o">&gt;&gt;</span> <span class="n">any</span><span class="p">)</span><span class="o">.</span><span class="n">repeat</span> <span class="o">&gt;&gt;</span> <span class="n">newline</span><span class="p">)</span><span class="o">.</span><span class="n">repeat</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">:story</span><span class="p">)</span> <span class="p">{</span> <span class="n">space</span><span class="o">.</span><span class="n">maybe</span> <span class="o">&gt;&gt;</span> <span class="n">tile_block</span><span class="o">.</span><span class="n">maybe</span> <span class="o">&gt;&gt;</span> <span class="n">space</span><span class="o">.</span><span class="n">maybe</span> <span class="o">&gt;&gt;</span> <span class="n">section</span><span class="o">.</span><span class="n">repeat</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">root</span><span class="p">(</span><span class="ss">:story</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can parse out each section&rsquo;s heading text, id, and content into a tree that looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:section</span><span class="o">=&gt;</span><span class="p">{</span>
</span><span class='line'>    <span class="ss">:heading</span><span class="o">=&gt;</span><span class="s2">&quot;Something isn&#39;t right here. &quot;</span><span class="err">@</span><span class="mi">51</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:id</span><span class="o">=&gt;</span><span class="s2">&quot;intro&quot;</span><span class="err">@</span><span class="mi">81</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:content</span><span class="o">=&gt;</span><span class="s2">&quot;You hear a phone ringing.</span><span class="se">\n\n</span><span class="s2">- [pick up phone](#phone)...&quot;</span><span class="err">@</span><span class="mi">89</span><span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:section</span><span class="o">=&gt;</span><span class="p">{</span>
</span><span class='line'>    <span class="ss">:heading</span><span class="o">=&gt;</span><span class="s2">&quot;You pick up the phone... &quot;</span><span class="err">@</span><span class="mi">210</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:id</span><span class="o">=&gt;</span><span class="s2">&quot;phone&quot;</span><span class="err">@</span><span class="mi">237</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:content</span><span class="o">=&gt;</span><span class="s2">&quot;It is your grandmother. You die.</span><span class="se">\n\n</span><span class="s2">- [start over](#intro)&quot;</span><span class="err">@</span><span class="mi">245</span><span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;That&rsquo;s well and good,&rdquo; you say, &ldquo;but how do we turn that into something useful?&rdquo;</p>

<p>Enter Parslet&rsquo;s Transform class (and exit your remaining skepticism). <a href="http://kschiess.github.io/parslet/transform.html">Parslet::Transform</a> takes a tree and lets you convert it into whatever you want. The following code takes a section tree from above, cleans up some whitespace, and then returns an instantiated Section class based on the input.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SectionTransformer</span> <span class="o">&lt;</span> <span class="ss">Parslet</span><span class="p">:</span><span class="ss">:Transform</span>
</span><span class='line'>  <span class="n">rule</span><span class="p">(</span><span class="ss">section</span><span class="p">:</span> <span class="n">subtree</span><span class="p">(</span><span class="ss">:hash</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">hash</span><span class="o">[</span><span class="ss">:content</span><span class="o">]</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:content</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>    <span class="nb">hash</span><span class="o">[</span><span class="ss">:heading</span><span class="o">]</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:heading</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:id</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="nb">hash</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">hash</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:id</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Section</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example of an instantiated <a href="https://github.com/semanticart/cyoa-parser/blob/master/lib/section.rb">Section</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="no">SectionTransformer</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">tree</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="c1"># &lt;Section:0x007fd6e5853298</span>
</span><span class='line'><span class="c1">#  @content=&quot;You hear a phone ringing.\n\n- [pick up phone](#phone)\n- [do not answer](#ignore-phone)\n- [set yourself on fire](#fire)&quot;,</span>
</span><span class='line'><span class="c1">#  @heading=&quot;Something isn&#39;t right here.&quot;,</span>
</span><span class='line'><span class="c1">#  @id=&quot;intro&quot;,</span>
</span><span class='line'><span class="c1">#  @links=[&quot;phone&quot;, &quot;ignore-phone&quot;, &quot;fire&quot;]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we have the building blocks for parsing a story into sections and then our Section class internally uses the LinkParser from above to determine where the section branches outward.</p>

<p>Let&rsquo;s finish this by encapsulating the entire story in a Story class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Story</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:sections</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@sections</span> <span class="o">=</span> <span class="n">parse_file</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">branches</span>
</span><span class='line'>    <span class="vi">@_branches</span> <span class="o">||=</span> <span class="no">BranchCruncher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@sections</span><span class="p">)</span><span class="o">.</span><span class="n">traverse</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">reachable</span>
</span><span class='line'>    <span class="n">branches</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">unreachable</span>
</span><span class='line'>    <span class="vi">@sections</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)</span> <span class="o">-</span> <span class="n">reachable</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">split!</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="n">branches</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">branch</span><span class="o">|</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="n">branch</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;.md&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>        <span class="n">branch</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">id</span><span class="o">|</span>
</span><span class='line'>          <span class="n">section</span> <span class="o">=</span> <span class="n">sections</span><span class="o">.</span><span class="n">detect</span><span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="nb">id</span><span class="p">}</span>
</span><span class='line'>          <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;# </span><span class="si">#{</span><span class="n">section</span><span class="o">.</span><span class="n">heading</span><span class="si">}</span><span class="s2"> {#</span><span class="si">#{</span><span class="n">section</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="n">section</span><span class="o">.</span><span class="n">content</span>
</span><span class='line'>          <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">parse_file</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="no">SectionTransformer</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="no">StoryParser</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few notes:</p>

<ul>
<li>You instantiate the Story class with a File object pointing to your story.</li>
<li>It parses out the sections</li>
<li>Then you can call methods to fill in the missing pieces of functionality we identified at the beginning of this post.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Which sections are orphaned?</span>
</span><span class='line'><span class="nb">p</span> <span class="n">story</span><span class="o">.</span><span class="n">unreachable</span>
</span><span class='line'><span class="c1"># =&gt; [&#39;some-unreachable-page-id&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># What branches are there in the book?</span>
</span><span class='line'><span class="nb">p</span> <span class="n">story</span><span class="o">.</span><span class="n">branches</span>
</span><span class='line'><span class="c1"># =&gt; [ [&quot;intro&quot;, &quot;investigate&quot;, &quot;help&quot;], [&quot;intro&quot;, &quot;investigate&quot;, &quot;rescue&quot;, &quot;wake-up&quot;], [&quot;intro&quot;, &quot;investigate&quot;, &quot;grounded&quot;], [&quot;intro&quot;, &quot;grounded&quot;] ]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Let me read each narrative branch by splitting each branch into files</span>
</span><span class='line'><span class="n">story</span><span class="o">.</span><span class="n">split!</span><span class="p">(</span><span class="s1">&#39;/tmp/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># creates files in /tmp/ folder named for each section in a branch</span>
</span><span class='line'><span class="c1"># e.g. intro-investigate-help.md</span>
</span><span class='line'><span class="c1"># You can read through each branch and ensure you&#39;ve maintained a cohesive narrative.</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you made it this far, you deserve a cookie and my undying affection. I&rsquo;m all out of cookies and any I had would be gluten-free anyway, so how about I just link you to the example code instead and we call it even?</p>

<p>Here&rsquo;s the <a href="https://github.com/semanticart/cyoa-parser">cyoa-parser on github</a>. It includes a <a href="https://github.com/semanticart/cyoa-parser/blob/master/examples/smell-ya-later.md">hilariously bad speed-story</a> I wrote for my son when he insisted on a CYOA bedtime story 10 minutes before bed.</p>

<p>If you&rsquo;d like to learn more about Parslet from someone who knows it better than me, check out <a href="http://www.confreaks.com/videos/2730-wickedgoodruby-writing-dsl-s-with-parslet">Jason Garber&rsquo;s Wicked Good Ruby talk</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Hypertext Fiction in Markdown]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2014/01/11/writing-hypertext-fiction-in-markdown/"/>
    <updated>2014-01-11T18:50:00-05:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2014/01/11/writing-hypertext-fiction-in-markdown</id>
    <content type="html"><![CDATA[<p>Remember <a href="https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure">Choose Your Own Adventure</a> books? I fondly remember finding new ways to get myself killed as I explored Aztec ruins or fought off aliens. Death or adventure waited just a few pages away and  I was the one calling all the shots.</p>

<p>Introducing my son to <a href="https://en.wikipedia.org/wiki/Hypertext_fiction">Hypertext Fiction</a> has rekindled my interest. I wondered how difficult it would be to throw something together to let me easily write CYOA-style books my kid could read on a kindle. I love markdown, so a toolchain built around it was definitely in order.</p>

<p>As it turns out, <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a> fits the bill perfectly. You can write a story in markdown and easily export it to EPUB. From there you&rsquo;re just a quick step through <a href="http://manual.calibre-ebook.com/cli/ebook-convert.html">ebook-convert (via calibre&rsquo;s commandline tools)</a> to a well-formed .mobi file that reads beautifully on a kindle.</p>

<p>Here&rsquo;s a quick example markdown story:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% You're probably going to die.
</span><span class='line'>% Jeffrey Chupp
</span><span class='line'>
</span><span class='line'># Something isn't right here. {#intro}
</span><span class='line'>
</span><span class='line'>You hear a phone ringing.
</span><span class='line'>
</span><span class='line'>- [pick up phone](#phone)
</span><span class='line'>- [do not answer](#ignore-phone)
</span><span class='line'>- [set yourself on fire](#fire)
</span><span class='line'>
</span><span class='line'># You pick up the phone... {#phone}
</span><span class='line'>
</span><span class='line'>It is your grandmother. You die.
</span><span class='line'>
</span><span class='line'>- [start over](#intro)
</span><span class='line'>
</span><span class='line'># You ignore the phone... {#ignore-phone}
</span><span class='line'>
</span><span class='line'>It was your grandmother. You die.
</span><span class='line'>
</span><span class='line'>- [start over](#intro)
</span><span class='line'>
</span><span class='line'># You set yourself on fire... {#fire}
</span><span class='line'>
</span><span class='line'>Strangely, you don't die. Guess you better start getting ready for school.
</span><span class='line'>
</span><span class='line'>- [pick up backpack and head out](#backpack)
</span><span class='line'>- [decide to skip school](#skip)
</span><span class='line'>
</span><span class='line'># You decide to skip school {#skip}
</span><span class='line'>
</span><span class='line'>A wild herd of dinosaurs bust in and kill you. Guess you'll never get to tell your friends about how you're immune to flame... or that you met live dinosaurs :(
</span><span class='line'>
</span><span class='line'>- [start over](#intro)
</span><span class='line'>
</span><span class='line'># Going to school {#backpack}
</span><span class='line'>
</span><span class='line'>You're on your way to school when a meteor lands on you, killing you instantly.
</span><span class='line'>
</span><span class='line'>- [start over](#intro)</span></code></pre></td></tr></table></div></figure>


<p>From the top, we have percent signs before the title and publishing date which Pandoc uses for the title page.</p>

<p>Then each chapter/section begins with an h1 header which has an id specified. This id is what we&rsquo;ll use in our links to let a reader choose where to go next.</p>

<p>If you don&rsquo;t specify a link, Pandoc will dasherize your header text, but it is probably easier to be specific since you need to reference it in your link choices anyway.</p>

<p>Save that as story.md and run the following to get your epub and mobi versions:</p>

<p><code>pandoc -o story.epub story.md &amp;&amp; /usr/bin/ebook-convert story.epub story.mobi</code></p>

<p>BONUS: ebook-convert even complains if one of your links points to an invalid destination.</p>

<p>Here&rsquo;s a preview as seen in <a href="http://www.amazon.com/gp/feature.html?docId=1000765261">Kindle Previewer</a></p>

<p><img class="right" src="http://blog.semanticart.com/blog/images/preview.png" width="328" height="560" title="'Example Generated mobi file'" ></p>

<p>And here are the generated <a href="http://blog.semanticart.com/blog/story.epub">EPUB</a> and <a href="http://blog.semanticart.com/blog/story.mobi">.mobi</a> files and the <a href="http://blog.semanticart.com/blog/story.md">markdown source file</a>.</p>

<p>Now, get writing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A proper API proxy written in Go]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2013/11/11/a-proper-api-proxy-written-in-go/"/>
    <updated>2013-11-11T16:16:00-05:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2013/11/11/a-proper-api-proxy-written-in-go</id>
    <content type="html"><![CDATA[<p>A little over a month ago, I blogged about <a href="http://blog.semanticart.com/blog/2013/09/23/a-simple-api-proxy-written-in-go/">a API proxy written in Go</a>. This post contained a functioning but incredibly naive (not to mention unidiomatic) piece of Go code intended to allow proxying API requests while hiding your API keys. Here&rsquo;s an updated version that makes better use of the Go standard library and works using layers like Ruby&rsquo;s middleware (for more on this topic, <a href="http://justinas.org/writing-http-middleware-in-go/">see the excellent article here</a>). It also improves upon the original in that it will work with all HTTP verbs.</p>

<p>When writing the first version, I tried using <a href="http://golang.org/pkg/net/http/httputil/#NewSingleHostReverseProxy">httputil.NewSingleHostReverseProxy</a> since the name sounds like exactly what I was trying to do. There was an important piece missing by default, though, which made the library seem mysteriously broken. Being a newbie in a hurry, I went with the solution you can see in the previous post.</p>

<p>What was missing? httputil.NewSingleHostReverseProxy does not set the host of the request to the host of the destination server. If you&rsquo;re proxying from foo.com to bar.com, requests will arrive at bar.com with the host of foo.com. Many webservers are configured to not serve pages if a request doesn&rsquo;t appear from the same host.</p>

<p>Fortunately it isn&rsquo;t too complicated to modify the chain to tweak the host.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">sameHost</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">r</span><span class="p">.</span><span class="nx">Host</span> <span class="p">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Host</span>
</span><span class='line'>      <span class="nx">handler</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// initialize our reverse proxy</span>
</span><span class='line'><span class="nx">reverseProxy</span> <span class="o">:=</span> <span class="nx">httputil</span><span class="p">.</span><span class="nx">NewSingleHostReverseProxy</span><span class="p">(</span><span class="nx">serverUrl</span><span class="p">)</span>
</span><span class='line'><span class="c1">// wrap that proxy with our sameHost function</span>
</span><span class='line'><span class="nx">singleHosted</span> <span class="o">:=</span> <span class="nx">sameHost</span><span class="p">(</span><span class="nx">reverseProxy</span><span class="p">)</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:5000&quot;</span><span class="p">,</span> <span class="nx">singleHosted</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perfect. We&rsquo;re now setting the host of the request to the host of the destination URL.</p>

<p>Continuing with this approach, let&rsquo;s combine our secret query params with the existing request query.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">queryCombiner</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">,</span> <span class="nx">addon</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// first parse the provided string to pull out the keys and values</span>
</span><span class='line'>  <span class="nx">values</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">ParseQuery</span><span class="p">(</span><span class="nx">addon</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;addon failed to parse&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// now we apply our addon params to the existing query</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">query</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Query</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">query</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">values</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">RawQuery</span> <span class="p">=</span> <span class="nx">query</span><span class="p">.</span><span class="nx">Encode</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">handler</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And usage is similar to above. We just continue to chain together our handlers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">combined</span> <span class="o">:=</span> <span class="nx">queryCombiner</span><span class="p">(</span><span class="nx">singleHosted</span><span class="p">,</span> <span class="s">&quot;key=value&amp;name=bob&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we&rsquo;ll need to allow <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a> on our server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">addCORS</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Access-Control-Allow-Origin&quot;</span><span class="p">,</span> <span class="s">&quot;*&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Access-Control-Allow-Headers&quot;</span><span class="p">,</span> <span class="s">&quot;X-Requested-With&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">handler</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And add that to our chain</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">cors</span> <span class="o">:=</span> <span class="nx">addCORS</span><span class="p">(</span><span class="nx">combined</span><span class="p">)</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:5000&quot;</span><span class="p">,</span> <span class="nx">cors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is available on <a href="https://github.com/semanticart/simpleapiproxy">github</a> and it runs quite well with the <a href="https://github.com/kr/heroku-buildpack-go">heroku go buildpack</a>.</p>

<p>It has a couple tests. I should add some more, but I&rsquo;m not totally happy with the current testing approach. Feedback is very welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple API proxy written in Go]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2013/09/23/a-simple-api-proxy-written-in-go/"/>
    <updated>2013-09-23T00:00:00-04:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2013/09/23/a-simple-api-proxy-written-in-go</id>
    <content type="html"><![CDATA[<h1>UPATE: see <a href="http://blog.semanticart.com/blog/2013/11/11/a-proper-api-proxy-written-in-go/">&ldquo;A proper API proxy written in Go&rdquo;</a> for a better solution to this problem.</h1>

<h3>The problem:</h3>

<p>Have you ever written a javascript app that needed to consume an API? What if the API requires you to pass your api key along in the query params? How do you hide your key?</p>

<p>This weekend I bumped into this issue once again. I was writing a simple app in angular to consume the last.fm api when it hit me.</p>

<p>This usually leaves me with two options:</p>

<ol>
<li>Decide my api key isn&rsquo;t worth hiding and just embed it in the javascript.</li>
<li>Make a call to the app server (I&rsquo;m usually using Rails) that would then make the API call within the request lifecycle and return the json when the API call finishes.</li>
</ol>


<p>Option 1 is also known as &ldquo;giving up&rdquo; &ndash; you don&rsquo;t really want everyone to have your api key, do you? What happens when someone else starts using it to do nefarious things on your behalf or just decides to help you hit your rate limit faster?</p>

<p>Option 2 is safer, but now your poor app server pays the penalty of the API being slow. If the API call takes 3 seconds, your server process/thread is tied up for that time. Lame.</p>

<p>Imagine your rails app is built around an external API. Do you really want to spin up more and more instances to gain concurrency just to protect your key?</p>

<h3>The solution: Move things out-of-band</h3>

<p>For requests that could otherwise hit the api directly, your app server shouldn&rsquo;t pay the penalties of keeping your key secure. So let&rsquo;s move things out-of-band.</p>

<p>I&rsquo;d been meaning to play with <a href="http://golang.org/">Go</a> for some time but never had the right project. The implementation here was fairly simple but needed to be highly concurrent, so this felt like a good fit.</p>

<p>Borrowing from example Go http servers and http consumers, I came up with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">errorOut</span><span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Access-Control-Allow-Origin&quot;</span><span class="p">,</span> <span class="s">&quot;*&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Access-Control-Allow-Headers&quot;</span><span class="p">,</span> <span class="s">&quot;X-Requested-With&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Method</span> <span class="o">==</span> <span class="s">&quot;GET&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">newUrl</span> <span class="kt">string</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getenv</span><span class="p">(</span><span class="s">&quot;URL_ROOT&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="o">+</span> <span class="s">&quot;?&quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">RawQuery</span> <span class="o">+</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getenv</span><span class="p">(</span><span class="s">&quot;URL_SUFFIX&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;fetching %s\n&quot;</span><span class="p">,</span> <span class="nx">newUrl</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">response</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="nx">newUrl</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">errorOut</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">defer</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">contents</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">errorOut</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;%s\n&quot;</span><span class="p">,</span> <span class="nx">contents</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The server takes incoming requests and will translate the url by substituting the provided URL_ROOT and appending the URL_SUFFIX (the api key). It fetches that foreign url and then returns the results.</p>

<p>So with the example config:</p>

<pre><code>URL_ROOT=http://ws.audioscrobbler.com/2.0/ URL_SUFFIX=&amp;api_key=XXXXXXXXXXXXX
</code></pre>

<p>A request to the go server at <a href="http://example.com/?method=user.getrecenttracks&amp;user=violencenow&amp;format=json">http://example.com/?method=user.getrecenttracks&amp;user=violencenow&amp;format=json</a> would return the contents of <a href="http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&amp;user=violencenow&amp;format=json&amp;api_key=XXXXXXXXXXXXX">http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&amp;user=violencenow&amp;format=json&amp;api_key=XXXXXXXXXXXXX</a></p>

<p>This isn&rsquo;t a solution for everything. Right now it only supports GET requests &ndash; this is probably all you&rsquo;d ever want, lest someone start posting to your endpoint and doing things you don&rsquo;t expect. These sorts of potentially destructive behaviors are perhaps better handled in-band where you can apply some sanity checks.</p>

<p>But if all you need to do is get content from an API without exposing your keys to the public, this might be a good solution for you.</p>

<h3>Some numbers</h3>

<p>This is very unscientific, but I setup a <a href="https://gist.github.com/semanticart/b0285765737997e8593://gist.github.com/semanticart/b0285765737997e8593e">Go server</a> on heroku <a href="http://sleepy-server.herokuapp.com/">http://sleepy-server.herokuapp.com/</a> that takes a request, waits 1 second, and then returns plain text.</p>

<p>The benchmark for that with <code>ab -c 300 -n 600 "http://sleepy-server.herokuapp.com/"</code></p>

<pre><code>Concurrency Level:      300
Time taken for tests:   5.046 seconds
Complete requests:      600
Failed requests:        0
Write errors:           0
Total transferred:      83400 bytes
HTML transferred:       2400 bytes
Requests per second:    118.91 [#/sec] (mean)
Time per request:       2522.907 [ms] (mean)
Time per request:       8.410 [ms] (mean, across all concurrent requests)
Transfer rate:          16.14 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:       28  322 534.7    107    2257
Processing:  1040 1229 223.1   1148    2640
Waiting:     1038 1228 223.0   1148    2640
Total:       1069 1552 587.1   1309    3867
</code></pre>

<p>Now, let&rsquo;s use our api_proxy to fetch requests from that server and serve them up by setting <code>URL_ROOT=http://sleepy-server.herokuapp.com</code>.</p>

<p>And we&rsquo;ll use the same benchmark command: <code>ab -c 300 -n 600 "http://some-fake-server-name-here.herokuapp.com/"</code></p>

<pre><code>Concurrency Level:      300
Time taken for tests:   5.285 seconds
Complete requests:      600
Failed requests:        0
Write errors:           0
Total transferred:      132000 bytes
HTML transferred:       3000 bytes
Requests per second:    113.54 [#/sec] (mean)
Time per request:       2642.282 [ms] (mean)
Time per request:       8.808 [ms] (mean, across all concurrent requests)
Transfer rate:          24.39 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:       28  324 550.9     75    2260
Processing:  1049 1406 325.2   1333    3012
Waiting:     1049 1405 325.1   1331    3012
Total:       1085 1730 609.4   1644    3875
</code></pre>

<p>Scientific or not, that&rsquo;s performance I can live with. And hopefully those API endpoints aren&rsquo;t quite taking a full second per request.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicorn Pukes Serving Large Files]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2013/08/29/unicorn-pukes-serving-large-files/"/>
    <updated>2013-08-29T13:46:00-04:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2013/08/29/unicorn-pukes-serving-large-files</id>
    <content type="html"><![CDATA[<p>Earlier today I was getting this weird <a href="http://unicorn.bogomips.org/">unicorn</a> error on heroku when trying to serve a retina-sized image.</p>

<pre><code>ERROR -- : app error: undefined method `each' for nil:NilClass (NoMethodError)
ERROR -- : [..]/unicorn-4.6.3/lib/unicorn/http_response.rb:60:in `http_response_write'
ERROR -- : [..]/unicorn-4.6.3/lib/unicorn/http_server.rb:563:in `process_client'
ERROR -- : [..]/unicorn-4.6.3/lib/unicorn/http_server.rb:633:in `worker_loop'
ERROR -- : [..]/unicorn-4.6.3/lib/unicorn/http_server.rb:500:in `spawn_missing_workers'
ERROR -- : [..]/unicorn-4.6.3/lib/unicorn/http_server.rb:142:in `start'
ERROR -- : [..]/unicorn-4.6.3/bin/unicorn_rails:209:in `&lt;top (required)&gt;'
</code></pre>

<p>Weird, right?  But sure enough, whenever I tried to view some-image@2x.png, everything went terribly wrong.</p>

<p>Googling took too long to find an answer, so I&rsquo;m sharing my solution here in hopes that it helps someone else (oh, hai, google bot).</p>

<p>The issue is actually a bug in the version of rack-cache required by actionpack in Rails 3.2.14. Attempting to serve files larger than 1mb causes this error.</p>

<p>It has been <a href="https://github.com/rtomayko/rack-cache/issues/42">fixed</a>, but I had to require the master branch for rack-cache to resolve the problem.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;rack-cache&quot;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s2">&quot;rtomayko/rack-cache&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;unicorn&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>No more error.</p>

<p>Now, the real solution is to not serve large images through unicorn on heroku. But hooking up a CDN is another problem for another time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Letterpress Word Finder]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2013/08/27/letterpress-word-finder/"/>
    <updated>2013-08-27T16:13:00-04:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2013/08/27/letterpress-word-finder</id>
    <content type="html"><![CDATA[<p>In an attempt to start to blog more, here&rsquo;s a quick follow-up post on the <a href="http://blog.semanticart.com/blog/2012/11/18/quick-and-dirty-ocr-for-letterpress-and-other-tile-based-games/">previous Letterpress article</a>.</p>

<h3>Background</h3>

<p>As a reminder, here&rsquo;s how I outlined steps in creating a Letterpress solver:</p>

<ol>
<li>Take screenshot of game and import it into solver</li>
<li>Parse the board into a string of letters</li>
<li>Reduce a dictionary of valid words against those characters to find playable words</li>
<li>Optionally make recommendations of which word to play based on current board state and strategy. (i.e. don&rsquo;t be naive)</li>
</ol>


<p>We built step one (sort-of) and step two in the previous article, so let&rsquo;s move on to step three.</p>

<h3>Requirements</h3>

<p>We want our script to fulfill the following requirements:</p>

<ol>
<li>Accept the board letters via STDIN or commandline arguments.</li>
<li>Reduce the dictionary words against those letters.</li>
<li>Dump out matching words (without regard to board state/strategy).</li>
</ol>


<h3>Implementation</h3>

<p>We&rsquo;ll take either an argument or read STDIN and downcase it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">letters</span> <span class="o">=</span> <span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">||</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">read</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span>
</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t have the official Letterpress dictionary (a quick googling will get you on the right track if you insist), but every good unix-y system has a dictionary file.</p>

<pre><code>$ cat /usr/share/dict/words | wc -l
235886
</code></pre>

<p>OK, that&rsquo;s a lot of words. Let&rsquo;s pull them in and downcase them too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;/usr/share/dict/words&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the only really interesting part: a method to determine if a word can be constructed from letters. I&rsquo;ve shamelessly borrowed a perfectly fast solution from <a href="http://stackoverflow.com/questions/11349544/ruby-optimize-the-comparison-of-two-arrays-with-duplicates">Stackoverflow</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">is_subset?</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">letters</span><span class="p">)</span>
</span><span class='line'>  <span class="o">!</span><span class="n">word</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">find</span><span class="p">{</span><span class="o">|</span><span class="n">char</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">letters</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">char</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we reduce our words by those that match our letters</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">matching_words</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="n">is_subset?</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">letters</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there&rsquo;s nothing left to do but dump them out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">matching_words</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:length</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the <a href="https://gist.github.com/semanticart/6346135">entire word generating script</a>.</p>

<p>And an example of using it with the board parser from the previous post:</p>

<pre><code>$ ruby -r ./board_parser -e "puts BoardParser.new('light.png').tiles.join" | ruby letter.rb | tail -n 10
hermodactyl
typhlectomy
cryohydrate
polydactyle
pterodactyl
crymotherapy
hydrolyzable
acetylthymol
overthwartly
protractedly
</code></pre>

<p>Excellent. Of course, not all words in your system&rsquo;s dictionary file may be playable, YMMV, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick and Dirty OCR for Letterpress &amp; Other Tile-based Games]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2012/11/18/quick-and-dirty-ocr-for-letterpress-and-other-tile-based-games/"/>
    <updated>2012-11-18T00:00:00-05:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2012/11/18/quick-and-dirty-ocr-for-letterpress-and-other-tile-based-games</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://blog.semanticart.com/blog/images/light.png" width="160" height="240" title="'Light Theme Game Board'" ></p>

<p>I&rsquo;ve been playing enough <a href="https://itunes.apple.com/us/app/letterpress-word-game/id526619424?mt=8">Letterpress</a> lately to realize that I&rsquo;m not great at it. This is super frustrating for me when this is a game that you could easily teach a computer to play.</p>

<p>I&rsquo;m not the first person to have that thought. There are plenty of cheating programs for Letterpress (just google or search in the app store).</p>

<p>I haven&rsquo;t investigated these solvers but in thinking about the problem, the basic approach would seem to be:</p>

<ul>
<li>Take screenshot of game and import it into solver</li>
<li>Parse the board into a string of letters</li>
<li>Reduce a dictionary of valid words against those characters to find playable words</li>
<li>Optionally make recommendations of which word to play based on current board state and strategy.</li>
</ul>


<p>I wondered how quickly I could throw something together to simply parse the game board into a string of letters. It turns out it is super easy. To get started I took a screenshot of a game in progress and downloaded it from my phone.</p>

<!--more-->


<p>I&rsquo;d heard about <a href="https://code.google.com/p/tesseract-ocr/">tesseract</a> back when it was first announced and it seemed worth giving it a shot. I started with <code>brew install tesseract</code> and tried simply passing in the board image unmodified:</p>

<pre><code>$ tesseract light.png /tmp/output
$ cat /tmp/output.txt
R
QM V
66:
KO
</code></pre>

<p>Not even close. The homebrew instructions recommend grayscaling the image first with <a href="http://www.imagemagick.org/script/index.php">ImageMagick</a>, so what do we get after that?</p>

<pre><code>$ convert light.png -type Grayscale /tmp/gray.tif
$ tesseract /tmp/gray.tif /tmp/output
$ cat /tmp/output.txt

QM
V
w
A‘ K
6'
</code></pre>

<p><strong>Ugh</strong>, even worse.<a href="#tesseract-parsing-footnote"><sup>1</sup></a></p>

<p>But poking through tesseract&rsquo;s options reveal some promise via pagesegmode settings:</p>

<pre><code>7 = Treat the image as a single text line.
</code></pre>

<p>and</p>

<pre><code>10 = Treat the image as a single character.
</code></pre>

<p>7 turned out to be a bust, but after testing option 10 on a few individual tiles, things were starting to look up. So let&rsquo;s just break the image up into the individual 25 tiles and recognize each one.</p>

<p>There may be more elegant ways to break the image into tiles, but I ended up using two ImageMagick commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># remove the non-tile content (i.e. the scores, etc. in the header)</span>
</span><span class='line'>convert light.png -gravity North -chop 0x320 /tmp/headless.png
</span><span class='line'><span class="c"># break the tile-content into 128x128px chunks</span>
</span><span class='line'>convert /tmp/headless.png -crop 128x128 /tmp/tile_%02d.png
</span></code></pre></td></tr></table></div></figure>


<p>Then I wrapped these two commands up in a <a href="https://github.com/semanticart/letterpress-board-parser/blob/master/board_parser.rb">ruby class for ease of use</a> and wrote <a href="https://github.com/semanticart/letterpress-board-parser/blob/master/test/board_parser_test.rb">a simple test</a>.</p>

<p>so, running the ruby class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby -r ./board_parser -e <span class="s2">&quot;puts BoardParser.new(&#39;light.png&#39;).tiles.join&quot;</span>
</span><span class='line'>KTVHROBDRBDLCYTPLEWAFZYMB
</span></code></pre></td></tr></table></div></figure>


<p>Bingo! A perfect match, ready to be compared to a dictionary of valid words.</p>

<p>It turns out tesseract is great at matching single tiles regardless of color scheme or captured state of the tile. The tests for the code run against screenshots from all available color schemes.</p>

<p>This approach is dead-simple and leans heavily on solid existing technologies. Because of this, the glue code itself doesn&rsquo;t have to be clever at all :)</p>

<p>Note that this quick hack is just designed to work against iPhone 4 resolution screenshots -you would have to (at least) change the header crop size for iPhone 5.</p>

<hr />


<p id="tesseract-parsing-footnote">1: The recommendation to convert the image to grayscale is a good hint that tesseract probably relies a lot on consistent contrast. This coupled with the fact that we&#8217;re dealing with random letters instead of words definitely stacks the cards against tesseract. Dealing with individual tiles/characters solves both the confusion of multiple contrasts and the confusion of dealing with random gibberish.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flashing sprites aren't as sexy as they sound]]></title>
    <link href="http://blog.semanticart.com/blog/blog/2012/10/09/flashing-sprites-arent-as-sexy-as-they-sound/"/>
    <updated>2012-10-09T20:15:00-04:00</updated>
    <id>http://blog.semanticart.com/blog/blog/2012/10/09/flashing-sprites-arent-as-sexy-as-they-sound</id>
    <content type="html"><![CDATA[<p>My skills have traditionally skewed towards the back-end so I&rsquo;m still finding lots of new tricks in front-end development that are new to me. Here&rsquo;s a quick example&hellip;</p>

<p>I recently created a button with <a href="http://compass-style.org/help/tutorials/spriting/" title="Compass Sprite Tutorial">Compass sprites</a> that had images for the default state, hover state, and active (pressed) state.</p>

<p>Here&rsquo;s the gist of what I was doing:</p>

<figure class='code'><figcaption><span>special_button.sass</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nv">$button_sprites</span><span class="o">:</span> <span class="nf">sprite-map</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">/special-button/*.png&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.special-button</span>
</span><span class='line'>  <span class="na">background</span><span class="o">:</span> <span class="nf">sprite</span><span class="p">(</span><span class="nv">$button_sprites</span><span class="o">,</span> <span class="s2">&quot;button-default&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">&amp;</span><span class="nd">:hover</span>
</span><span class='line'>    <span class="na">background</span><span class="o">:</span> <span class="nf">sprite</span><span class="p">(</span><span class="nv">$button_sprites</span><span class="o">,</span> <span class="s2">&quot;button-hover&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">&amp;</span><span class="nd">:active</span>
</span><span class='line'>    <span class="na">background</span><span class="o">:</span> <span class="nf">sprite</span><span class="p">(</span><span class="nv">$button_sprites</span><span class="o">,</span> <span class="s2">&quot;button-active&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>which generates this css:</p>

<figure class='code'><figcaption><span>special_button.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.special-button</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="sx">url(/assets/special-button-sb6a3aa70c5.png)</span> <span class="m">0</span> <span class="m">-204px</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.special-button</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="sx">url(/assets/special-button-sb6a3aa70c5.png)</span> <span class="m">0</span> <span class="m">-230px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.special-button</span><span class="nd">:active</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="sx">url(/assets/special-button-sb6a3aa70c5.png)</span> <span class="m">0</span> <span class="m">-126px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straight-forward, right? For each state I specify which of the sprite sub-images it should show.</p>

<p>Unfortunately, I was bumping into an issue in Chrome where the button would sometimes flash between image states on hover and active.</p>

<p>After a bit of googling, I found <a href="http://stackoverflow.com/questions/8035366/image-flickering-on-mouseover-even-when-sprites-are-used-for-hover-image" title="StackOverflow Post">an answer</a>. The problem is that I was specifying the URL redundantly, causing Chrome to show no background while it briefly loads that same sprite again to show it at the new position. After a little digging in the Compass docs, I found <a href="http://compass-style.org/reference/compass/helpers/sprites/#sprite-position">sprite-position</a> and tweaked accordingly:</p>

<figure class='code'><figcaption><span>special_button_fixed.sass</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nv">$button_sprites</span><span class="o">:</span> <span class="nf">sprite-map</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">/special-button/*.png&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.special-button</span>
</span><span class='line'>  <span class="na">background</span><span class="o">:</span> <span class="nf">sprite</span><span class="p">(</span><span class="nv">$button_sprites</span><span class="o">,</span> <span class="s2">&quot;button-default&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">&amp;</span><span class="nd">:hover</span>
</span><span class='line'>    <span class="na">background-position</span><span class="o">:</span> <span class="nf">sprite-position</span><span class="p">(</span><span class="nv">$button_sprites</span><span class="o">,</span> <span class="s2">&quot;button-hover&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">&amp;</span><span class="nd">:active</span>
</span><span class='line'>    <span class="na">background-position</span><span class="o">:</span> <span class="nf">sprite-position</span><span class="p">(</span><span class="nv">$button_sprites</span><span class="o">,</span> <span class="s2">&quot;button-active&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;re using the same sprite specified in the original <code>.special_button</code> class and just changing the position in the other states. Our flashing problem is gone.</p>
]]></content>
  </entry>
  
</feed>
